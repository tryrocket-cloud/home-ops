- name: Backup Vaultwarden export
  hosts: localhost
  gather_facts: true

  vars:
    working_dir: "{{ ansible_env.HOME }}"

    export_json: "{{ working_dir }}/export.json"
    backup_type: "export"
    
    vaultwarden_api: "{{ lookup('ansible.builtin.env', 'VAULTWARDEN_API') | default('https://vaultwarden.tryrocket.cloud', true) }}"
    vaultwarden_username: "{{ lookup('ansible.builtin.env', 'VAULTWARDEN_USERNAME') }}"
    vaultwarden_password: "{{ lookup('ansible.builtin.env', 'VAULTWARDEN_PASSWORD') }}"
    
    healthchecks_uuid: "{{ lookup('ansible.builtin.env', 'HEALTHCHECKSIO_CHECK_UUID') }}"
    healthchecks_api_key: "{{ lookup('ansible.builtin.env', 'HEALTHCHECKSIO_API_KEY') }}"
    
    restic_env:
      AWS_ACCESS_KEY_ID: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
      AWS_SECRET_ACCESS_KEY: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
      RESTIC_REPOSITORY: "{{ lookup('ansible.builtin.env', 'RESTIC_REPOSITORY') }}"
      RESTIC_PASSWORD: "{{ lookup('ansible.builtin.env', 'RESTIC_PASSWORD') }}"

  pre_tasks:
    - name: Ensure working directory exists
      file:
        path: "{{ working_dir }}"
        state: directory
        mode: '0755'

  tasks:
    - block:
        - name: Configure Vaultwarden server
          command: "bw config server {{ vaultwarden_api }}"

        - name: Login to Vaultwarden
          shell: "bw login {{ vaultwarden_username }} {{ vaultwarden_password }} --raw"
          register: bw_login_result
          changed_when: False

        - name: Set BW_SESSION fact from login output
          set_fact:
            BW_SESSION: "{{ bw_login_result.stdout | trim }}"

        - name: Export Vaultwarden data
          shell: "bw export --format json --output {{ export_json }}"
          environment:
            BW_SESSION: "{{ BW_SESSION }}"
          register: bw_export_result

        # - name: Check if the export.json exists
        #   stat:
        #     path: "{{ export_json }}"
        #   register: file_check

        # - name: Fail if export.json does not exist
        #   fail:
        #     msg: "The required file {{ export_json }} does not exist!"
        #   when: not file_check.stat.exists

        - name: Logout from Bitwarden
          shell: "bw logout"
          environment:
            BW_SESSION: "{{ BW_SESSION }}"
          register: bw_logout_result

        - name: Get Vaultwarden config via API
          uri:
            url: "{{ vaultwarden_api }}/api/config"
            method: GET
            return_content: yes
          register: vaultwarden_api_response
          failed_when: vaultwarden_api_response.status != 200

        - name: Extract Vaultwarden version from API response
          set_fact:
            vaultwarden_version: "{{ vaultwarden_api_response.json.version }}"
          failed_when: vaultwarden_api_response.json.version is not defined

        - name: Get Bitwarden CLI version
          shell: bw --version
          register: bw_version_result
          changed_when: false

        - name: Set Bitwarden CLI version fact
          set_fact:
            bw_cli_version: "{{ bw_version_result.stdout | trim }}"

        # - name: Debug versions
        #   debug:
        #     msg: "Vaultwarden version: {{ vaultwarden_version }}, Bitwarden CLI version: {{ bw_cli_version }}"

        - include_tasks: common-restic.yaml

        # - name: Run Restic backup
        #   shell: |
        #     restic backup --host {{ host }} \
        #       --tag vaultwarden_version:{{ vaultwarden_version }} \
        #       --tag backup_type:export \
        #       --tag environment:production \
        #       --tag bwcli_version:{{ bw_cli_version }} \
        #       "{{ export_json }}"
        #   environment: "{{ restic_env }}"
        #   register: restic_backup_result

        # - name: Run Restic check
        #   shell: restic check --read-data-subset 1/10
        #   environment: "{{ restic_env }}"
        #   register: restic_check_result

        # - name: Run Restic forget and prune snapshots
        #   shell: restic forget --keep-daily 30 --keep-monthly 3 --keep-yearly 1 --prune
        #   environment: "{{ restic_env }}"
        #   register: restic_forget_result

        # - name: Signal success to healthchecks.io
        #   community.healthchecksio.ping:
        #     state: present
        #     uuid: "{{ healthchecks_uuid }}"
        #     api_key: "{{ healthchecks_api_key }}"
        #     signal: "success"

      rescue:
        - name: Signal failure to healthchecks.io
          community.healthchecksio.ping:
            state: present
            uuid: "{{ healthchecks_uuid }}"
            api_key: "{{ healthchecks_api_key }}"
            signal: "fail"
