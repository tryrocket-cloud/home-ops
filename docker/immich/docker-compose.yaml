services:
  machine-learning:
    cap_drop:
      - ALL
    environment:
      IMMICH_LOG_LEVEL: log
      IMMICH_PORT: "32002"
      MACHINE_LEARNING_CACHE_FOLDER: /mlcache
      NODE_ENV: production
      NVIDIA_VISIBLE_DEVICES: void
      TRANSFORMERS_CACHE: /mlcache
      TZ: Europe/Berlin
      UMASK: "002"
      UMASK_SET: "002"
    healthcheck:
      disable: false
    image: ghcr.io/immich-app/immich-machine-learning:v1.132.3
    platform: linux/amd64
    privileged: false
    restart: unless-stopped
    security_opt:
      - no-new-privileges=true
    stdin_open: false
    tty: false
    volumes:
      - read_only: false
        target: /mlcache
        type: volume
        volume:
          nocopy: false

  database:
    image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: "5432"
      POSTGRES_USER: ${POSTGRES_USER}
      TZ: Europe/Berlin
      UMASK: "002"
      UMASK_SET: "002"
      DB_STORAGE_TYPE: 'HDD'
    restart: unless-stopped
    volumes:
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/postgres-data/data
        target: /var/lib/postgresql/data
        type: bind

  pgvecto:
    image: tensorchord/pgvecto-rs:pg15-v0.2.0
    cap_drop:
      - ALL
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: "5433"
      POSTGRES_USER: ${POSTGRES_USER}
      TZ: Europe/Berlin
      UMASK: "002"
      UMASK_SET: "002"
      DB_STORAGE_TYPE: 'HDD'
    healthcheck:
      interval: 10s
      retries: 30
      start_period: 10s
      test: pg_isready -h 127.0.0.1 -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB
      timeout: 5s
    platform: linux/amd64
    privileged: false
    restart: unless-stopped
    security_opt:
      - no-new-privileges=true
    stdin_open: false
    tty: false
    user: "3000:3000"
    volumes:
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/postgres-data/postgres-data
        target: /var/lib/postgresql/data
        type: bind

  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:facc1d2c3462975c34e10fccb167bfa92b0e0dbd992fc282c29a61c3243afb11
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

#  redis:
#    cap_drop:
#      - ALL
#    environment:
#      ALLOW_EMPTY_PASSWORD: no
#      NVIDIA_VISIBLE_DEVICES: void
#      REDIS_PASSWORD: ${REDIS_PASSWORD}
#      REDIS_PORT_NUMBER: "6379"
#      TZ: Europe/Berlin
#      UMASK: "002"
#      UMASK_SET: "002"
#    healthcheck:
#      interval: 10s
#      retries: 30
#      start_period: 10s
#      test: redis-cli -h 127.0.0.1 -p 6379 -a $$REDIS_PASSWORD ping | grep -q PONG
#      timeout: 5s
#    image: bitnami/redis:7.4.2
#    platform: linux/amd64
#    privileged: false
#    restart: unless-stopped
#    security_opt:
#      - no-new-privileges=true
#    stdin_open: false
#    tty: false
#    user: "1001:0"
#    volumes:    
#      - read_only: false
#        source: redis-data
#        target: /bitnami/redis/data
#        type: volume
#        volume:
#          nocopy: false

  server:
    container_name: immich-server
    cap_drop:
      - ALL
    depends_on:
      machine-learning:
        condition: service_healthy
      pgvecto:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_DATABASE_NAME: ${POSTGRES_DB}
      DB_HOSTNAME: database
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: "5433"
      DB_USERNAME: ${POSTGRES_USER}
      IMMICH_LOG_LEVEL: log
      IMMICH_MACHINE_LEARNING_ENABLED: "true"
      IMMICH_MACHINE_LEARNING_URL: http://machine-learning:32002
      IMMICH_PORT: "30041"
      NODE_ENV: production
      NVIDIA_VISIBLE_DEVICES: void
      REDIS_DBINDEX: "0"
      REDIS_HOSTNAME: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: "6379"
      TZ: Europe/Berlin
      UMASK: "002"
      UMASK_SET: "002"
    healthcheck:
      interval: 10s
      retries: 30
      start_period: 10s
      test: /usr/src/app/bin/immich-healthcheck
      timeout: 5s
    image: ghcr.io/immich-app/immich-server:v1.132.3
    platform: linux/amd64
    #ports:
    #  - mode: ingress
    #    protocol: tcp
    #    published: 30041
    #    target: 30041
    privileged: false
    restart: unless-stopped
    security_opt:
      - no-new-privileges=true
    stdin_open: false
    tty: false
    user: "3000:3000"
    volumes:
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/data/immich-data/backups
        target: /usr/src/app/upload/backups
        type: bind
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/data/immich-data/encoded-video
        target: /usr/src/app/upload/encoded-video
        type: bind
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/data/immich-data/library
        target: /usr/src/app/upload/library
        type: bind
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/data/immich-data/profile
        target: /usr/src/app/upload/profile
        type: bind
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/data/immich-data/thumbs
        target: /usr/src/app/upload/thumbs
        type: bind
      - bind:
          create_host_path: false
          propagation: rprivate
        read_only: false
        source: /mnt/tank/apps/immich/data/immich-data/upload
        target: /usr/src/app/upload/upload
        type: bind
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.immich-dashboard.rule=Host(`immich.tryrocket.cloud`)"
      - "traefik.http.routers.immich-dashboard.entrypoints=https"
      - "traefik.http.routers.immich-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.immich-dashboard.loadbalancer.server.port=30041"

  traefik:
    image: traefik:v3.5.0
    container_name: traefik
    restart: unless-stopped
      #read_only: true
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 5s
    environment:
      TZ: ${TZ}
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/tank/apps/immich/acme.json:/acme.json
      - /mnt/tank/apps/immich/traefik.yml:/etc/traefik/traefik.yml:ro
      #- /mnt/tank/apps/immich/truenas-ui.yml:/etc/traefik/dynamic/truenas-ui.yml:ro
    #command:
      #- --providers.docker=true
      #- --providers.file.directory=/etc/traefik/dynamic
      #- --providers.file.watch=true
  
#  backup:
#    container_name: immich-backup
#    image: ghcr.io/tryrocket-cloud/home-ops:immich
#    platform: linux/amd64
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      HC_UUID: ${HC_UUID}
#      HC_API_KEY: ${HC_API_KEY}
#      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
#      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
#      RESTIC_REPOSITORY: ${RESTIC_REPOSITORY}
#      RESTIC_PASSWORD: ${RESTIC_PASSWORD}
#      RESTIC_CACHE_DIR: /app/data/.cache/restic
#      RESTIC_HOST: truenas.tryrocket.cloud
#      TZ: Europe/Berlin
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /mnt/tank/apps/immich/data/immich-data:/app/data/immich-data:ro
#      - /mnt/tank/apps/immich/.cache/restic:/app/data/.cache/restic

volumes:
  redis-data: {}
