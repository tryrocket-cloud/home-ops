apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-vaultwarden-debian
spec:
  schedule: "0 22 * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 600
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  suspend: false
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          restartPolicy: Never

          volumes:
            - name: export
              emptyDir: {}
            - name: signals
              emptyDir: {}
            - name: cache
              persistentVolumeClaim:
                claimName: vaultwarden-support-pvc
            - name: helper-scripts
              configMap:
                name: helper-scripts
            - name: policies
              secret:
                secretName: all-in-one
                items:
                  - key: restic-policy.json
                    path: restic-policy.json
                  - key: deny-all-policy.json
                    path: deny-all-policy.json
                  - key: public-access-block-restic.json
                    path: public-access-block-restic.json
                  - key: public-access-block-deny-all.json
                    path: public-access-block-deny-all.json

          initContainers:
            - name: vaultwarden-export
              image: ghcr.io/tryrocket-cloud/home-ops:toolkit-38dfa08a823162b91b8b4b579a025a471c475a33
              imagePullPolicy: IfNotPresent
              env:
                - name: TZ
                  value: Europe/Berlin
                - name: VAULTWARDEN_HOST
                  value: vaultwarden.tryrocket.cloud
                - name: VAULTWARDEN_USER_ID
                  value: 2967ac9f-f0e5-4881-8be5-9d08371a167a
              envFrom:
                - secretRef:
                    name: all-in-one
                - secretRef:
                    name: healthchecksio
              volumeMounts:
                - name: export
                  mountPath: /export
                - name: helper-scripts
                  mountPath: /scripts
                - name: policies
                  mountPath: /policies
              command:
                - /bin/bash
                - -eox
                - pipefail
                - -c
              args:
                - |
                  source /scripts/hs.sh

                  trap 'hc_ping fail' ERR

                  hc_ping start

                  get_vaultwarden_version() {
                    VW_VERSION=$(curl -fsS -m 10 "https://${VAULTWARDEN_HOST}/api/config" \
                      | jq -r '.version // empty')
                    [[ -n "$VW_VERSION" ]] || error "Unable to retrieve Vaultwarden version"
                    echo "export VW_VERSION=${VW_VERSION}" > /export/.env
                    check_file "/export/.env"
                  }

                  export_vaultwarden_vault() {
                    log "Logging into Bitwarden and exporting data…"
                    bw config server "https://${VAULTWARDEN_HOST}"
                    export BW_SESSION
                    BW_SESSION=$(bw login --raw --cleanexit "${VAULTWARDEN_USERNAME}" "${VAULTWARDEN_PASSWORD}")
                    bw sync --cleanexit --quiet

                    local enc_json="/export/vaultwarden-${VAULTWARDEN_USER_ID}.encrypted.json"
                    local plain_json="/export/vaultwarden-${VAULTWARDEN_USER_ID}.plain.json"

                    bw export --format encrypted_json \
                      --password "${VAULTWARDEN_PASSWORD}" \
                      --output "${enc_json}" --cleanexit --quiet

                    bw export --format json \
                      --output "${plain_json}" --cleanexit --quiet

                    bw logout --cleanexit --quiet

                    check_file "${enc_json}"
                    check_file "${plain_json}"

                    log "Encrypting export with age…"
                    local cipher_file="/export/vaultwarden-${VAULTWARDEN_USER_ID}.age"
                    age --recipient "${AGE_RECIPIENT}" --output "${cipher_file}" "${plain_json}"
                    check_file "${cipher_file}"
                    head -c21 "${cipher_file}" \
                      | grep -q '^age-encryption\.org/v1' \
                      || error "Invalid age header"
                    rm -f "${plain_json}"
                  }

                  run_job_buffered() {
                    local name="$1"; shift
                    local tmp; tmp=$(mktemp)
                    (
                      { "$@"; } >"$tmp" 2>&1
                      echo "─── [${name}] done ───"
                      sed "s/^/[${name}] /" "$tmp"
                      rm -f "$tmp"
                    ) &
                  }

                  run_job_buffered 'get vaultwarden version' get_vaultwarden_version
                  run_job_buffered 'export vaultwarden vault' export_vaultwarden_vault

                  wait
                  echo "All jobs finished!"

            - name: restic-s3-policy
              image: ghcr.io/tryrocket-cloud/home-ops:toolkit-ac3e21cade59942ed7c1ef4a8dc595b3a71d815a
              imagePullPolicy: IfNotPresent
              env:
                - name: TZ
                  value: Europe/Berlin
              envFrom:
                - secretRef:
                    name: all-in-one
                - secretRef:
                    name: healthchecksio
              volumeMounts:
                - name: policies
                  mountPath: /policies
                - name: helper-scripts
                  mountPath: /scripts
              command:
                - /bin/bash
                - -eox
                - pipefail
                - -c
              args:
                - |
                  source /scripts/hs.sh

                  trap 'hc_ping fail' ERR
                  
                  disable_s3_block() {
                    log "Applying initial S3 policy…"
                    aws s3api put-bucket-policy \
                      --bucket "${BUCKET}" \
                      --endpoint-url "${AWS_ENDPOINT_URL}" \
                      --policy "file:///policies/restic-policy.json"
                    aws s3api put-public-access-block \
                      --bucket "${BUCKET}" \
                      --endpoint-url "${AWS_ENDPOINT_URL}" \
                      --public-access-block-configuration "file:///policies/public-access-block-restic.json"
                    log "S3 policy applied."
                  }

                  disable_s3_block

          containers:
            - name: restic-ionos-backup
              image: ghcr.io/tryrocket-cloud/home-ops:toolkit-ac3e21cade59942ed7c1ef4a8dc595b3a71d815a
              imagePullPolicy: IfNotPresent
              env:
                - name: TZ
                  value: Europe/Berlin
                - name: HOSTNAME
                  value: tryrocket.cloud
                - name: RESTIC_CACHE_DIR
                  value: /cache/ionos/vaultwarden/restic
                - name: BACKUP_DATA_PATH
                  value: /export
              envFrom:
                - secretRef:
                    name: all-in-one
                - secretRef:
                    name: healthchecksio
              volumeMounts:
                - name: export
                  mountPath: /export
                - name: signals
                  mountPath: /signals
                - name: cache
                  mountPath: /cache
                - name: policies
                  mountPath: /policies
                - name: helper-scripts
                  mountPath: /scripts
              command:
                - /bin/bash
                - -eox
                - pipefail
                - -c
              args:
                - |
                  source /scripts/hs.sh
                  source /export/.env

                  trap 'touch /signals/restic-ionos.done; hc_ping' EXIT
                  trap 'hc_ping fail' ERR

                  run_restic_backup() {
                    log "Starting Restic backup…"
                    restic backup \
                      --host "${HOSTNAME}" \
                      --tag "restic_version:$(restic version | awk 'NR==1{print $2}')" \
                      --tag "bw_cli_version:${BW_CLI_VERSION}" \
                      --tag "vaultwarden_version:${VW_VERSION}" \
                      --tag "age_version:${AGE_VERSION}" \
                      --tag "environment:production" \
                      "${BACKUP_DATA_PATH}"

                    restic check --read-data
                    restic forget --keep-within "180d" --prune
                    log "Restic backup completed."
                  }
                  
                  run_restic_backup

            - name: kopia-ionos-backup
              image: ghcr.io/tryrocket-cloud/home-ops:toolkit-ac3e21cade59942ed7c1ef4a8dc595b3a71d815a
              imagePullPolicy: IfNotPresent
              env:
                - name: TZ
                  value: Europe/Berlin
                - name: HOSTNAME
                  value: tryrocket.cloud
                - name: KOPIA_CHECK_FOR_UPDATES
                  value: "false"
                - name: KOPIA_CACHE_DIRECTORY
                  value: /cache/ionos/vaultwarden/kopia
                - name: BACKUP_DATA_PATH
                  value: /export
              envFrom:
                - secretRef:
                    name: all-in-one
                - secretRef:
                    name: healthchecksio-kopia-ionos
              volumeMounts:
                - name: export
                  mountPath: /export
                - name: signals
                  mountPath: /signals
                - name: cache
                  mountPath: /cache
                - name: policies
                  mountPath: /policies
                - name: helper-scripts
                  mountPath: /scripts
              command:
                - /bin/bash
                - -eox
                - pipefail
                - -c
              args:
                - |
                  source /scripts/hs.sh
                  source /export/.env

                  trap 'touch /signals/kopia-ionos.done; hc_ping' EXIT
                  trap 'hc_ping fail' ERR

                  run_kopia_backup() {
                    log "Starting Kopia backup…"
                    kopia repository connect s3 \
                      --bucket="$BUCKET" \
                      --endpoint="$ENDPOINT" \
                      --region="$REGION" \
                      --prefix="$PREFIX"

                    kopia snapshot create "${BACKUP_DATA_PATH}" \
                      --description="Daily export" \
                      --tags="hostname:$HOSTNAME \
                        kopia_version:$KOPIA_VERSION \
                        vaultwarden_version:$VAULTWARDEN_VERSION" \
                        bw_cli_version:${BW_CLI_VERSION} \
                        age_version:${AGE_VERSION} \
                        environment:production"

                    kopia snapshot verify
                    log "Kopia backup completed."
                  }

                  run_kopia_backup

            - name: deny-all-s3-policy
              image: ghcr.io/tryrocket-cloud/home-ops:toolkit-ac3e21cade59942ed7c1ef4a8dc595b3a71d815a
              volumeMounts:
                - name: signals
                  mountPath: /signals
                - name: policies
                  mountPath: /policies
                - name: helper-scripts
                  mountPath: /scripts
              envFrom:
                - secretRef:
                    name: all-in-one
                - secretRef:
                    name: healthchecksio
              command:
                - /bin/bash
                - -eox
                - pipefail
                - -c
                - |
                  source /scripts/hs.sh

                  trap 'hc_ping' EXIT
                  trap 'hc_ping fail' ERR

                  enable_s3_block() {
                    log "Applying final S3 block policy…"
                    aws s3api put-public-access-block \
                      --bucket "${BUCKET}" \
                      --endpoint-url "${AWS_ENDPOINT_URL}" \
                      --public-access-block-configuration "file:///policies/public-access-block-deny-all.json"
                    aws s3api put-bucket-policy \
                      --bucket "${BUCKET}" \
                      --endpoint-url "${AWS_ENDPOINT_URL}" \
                      --policy "file:///policies/deny-all-policy.json"
                    log "S3 block policy applied."
                  }

                  log "waiting for workers to finish"
                  until [ -f /signals/restic-ionos.done ] && [ -f /signals/kopia-ionos.done ]; do
                    sleep 1
                  done
                  log "all workers done; blocking s3"

                  enable_s3_block