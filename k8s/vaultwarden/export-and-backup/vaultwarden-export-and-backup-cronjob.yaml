apiVersion: batch/v1
kind: CronJob
metadata:
  name: vaultwarden-export-backup
spec:
  suspend: false
  schedule: "0 22 * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 600
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          restartPolicy: Never
          initContainers:
            # - name: test-ansible
            #   image: demisto/ansible-runner:1.0.0.2084661
            #   command: ["/bin/sh", "-c"]
            #   args:
            #     - ansible-playbook /playbooks/export-and-backup-playbook.yaml
            #   volumeMounts:
            #   - name: playbook-volume
            #     mountPath: /playbooks

            - name: get-vaultwarden-version
              image: ghcr.io/tryrocket-cloud/tryrocket-cloud:backup
              command:
                - /bin/sh
                - -c
                - |
                  ping -c 1 vaultwarden.tryrocket.cloud
                  nslookup vaultwarden.tryrocket.cloud

                  HTTP_STATUS=$(curl --verbose --write-out "%{http_code}" --output /tmp/vaultwarden_config.json https://vaultwarden.tryrocket.cloud/api/config)

                  if [ "$HTTP_STATUS" -ne 200 ]; then
                    echo "Error: Failed to fetch Vaultwarden config, HTTP status: $HTTP_STATUS"
                    exit 1
                  fi

                  jq --raw-output '.version' /tmp/vaultwarden_config.json > /export/vaultwarden.env

                  if [ $? -ne 0 ]; then
                    echo "Error: Failed to extract .version using jq"
                    exit 1
                  fi

                  if [ ! -f /export/vaultwarden.env ]; then
                    echo "Error: /export/vaultwarden.env file does not exist"
                    exit 1
                  fi

                  if [ ! -s /export/vaultwarden.env ]; then
                    echo "Error: /export/vaultwarden.env is empty"
                    exit 1
                  fi

                  cat /export/vaultwarden.env
              volumeMounts:
              - name: vaultwarden-export-volume
                mountPath: /export

            - name: export-vaultwarden-user-vault
              image: ghcr.io/tryrocket-cloud/tryrocket-cloud:backup
              imagePullPolicy: Always
              env:
                - name: NODE_NO_WARNINGS
                  value: "1"
                - name: VAULTWARDEN_EXPORT_JSON
                  value: /export/vaultwarden-export.json
              envFrom:
                - secretRef:
                    name: vaultwarden-user-33843b46-db47-43f3-a28b-adc0ec3e8bc9-secret
              command:
                - /bin/sh
                - -c
                - |
                  # TODO: refactor to handle multiple users

                  bw config server https://vaultwarden.tryrocket.cloud
                  export BW_SESSION=$(bw login "$username" "$password" --raw)

                  bw sync

                  bw export --format json --output "$VAULTWARDEN_EXPORT_JSON"

                  bw logout

                  [ ! -f "$VAULTWARDEN_EXPORT_JSON" ] && exit 1
                  [ ! -s "$VAULTWARDEN_EXPORT_JSON" ] && exit 1
                  
                  jq empty "$VAULTWARDEN_EXPORT_JSON" > /dev/null 2>&1

                  if [ $? -ne 0 ]; then
                    jq empty "$VAULTWARDEN_EXPORT_JSON"
                    exit 1
                  fi
              volumeMounts:
              - name: vaultwarden-export-volume
                mountPath: /export

          containers:
            - name: truenas-tryrocket-cloud-objectstorage-backup
              image: ghcr.io/tryrocket-cloud/tryrocket-cloud:backup
              imagePullPolicy: Always
              env:
                - name: VAULTWARDEN_EXPORT_JSON
                  value: /export/vaultwarden-export.json
                - name: HOSTNAME
                  value: tryrocket.cloud
              envFrom:
                - secretRef:
                    name: truenas-tryrocket-cloud-objectstorage-bucket
                - secretRef:
                    name: truenas-tryrocket-cloud-objectstorage-user
              command:
                - /bin/sh
                - -c
                - |
                  AWS_ACCESS_KEY_ID=your_access_key
                  AWS_SECRET_ACCESS_KEY=your_secret_key
                  AWS_DEFAULT_REGION=us-east-1
                  aws --endpoint-url http://192.168.178.75:9000 s3 cp $VAULTWARDEN_EXPORT_JSON s3://tryrocket.cloud/vaultwarden/$VAULTWARDEN_EXPORT_JSON
              volumeMounts:
                - name: vaultwarden-export-volume
                  mountPath: /export
                  readOnly: true
            - name: ionos-com-objectstorage-eu-central-3-s3-kopia-backup
              image: ghcr.io/tryrocket-cloud/tryrocket-cloud:backup
              imagePullPolicy: Always
              env:
                - name: VAULTWARDEN_EXPORT_JSON
                  value: /export/vaultwarden-export.json
                - name: KOPIA_CHECK_FOR_UPDATES
                  value: "false"
                - name: KOPIA_CACHE_DIRECTORY
                  value: /cache/ionos.com/vaultwarden/kopia
                - name: HOSTNAME
                  value: tryrocket.cloud
              envFrom:
                - secretRef:
                    name: ionos-com-objectstorage-bucket-secret
                - secretRef:
                    name: ionos-com-objectstorage-user-secret
                - secretRef:
                    name: ionos.com-kopia-repository-secret
              command:
                - /bin/sh
                - -c
                - |
                  VAULTWARDEN_VERSION=$(cat /export/vaultwarden.env)
                  KOPIA_VERSION=$(kopia --version | awk '{print $1}')
                  
                  [ -z "$KOPIA_VERSION" ] && exit 1  # Ensure Kopia version is set

                  # Start health check
                  #curl -fsS -m 10 --retry 5 $HC_PING_URL/start

                  kopia repository connect s3 --bucket="$BUCKET" --endpoint="$ENDPOINT" --region="$REGION" --prefix="$PREFIX"

                  # Perform Kopia backup
                  kopia snapshot create /export --description="Daily export" --tags="hostname:$HOSTNAME kopia:$KOPIA_VERSION vaultwarden:$VAULTWARDEN_VERSION"
                  #curl -fsS -m 10 --retry 5 $HC_PING_URL/$?

                  # Perform Kopia consistency check
                  kopia snapshot verify --verify-files-percent 33
                  #curl -fsS -m 10 --retry 5 $HC_PING_URL/$?

                  #cat /etc/environment
                  #cat ~/.config/kopia/repository.config
              volumeMounts:
                - name: vaultwarden-export-volume
                  mountPath: /export
                  readOnly: true
                # - name: backup-cache-volume
                #   mountPath: /cache
            - name: ionos-com-objectstorage-eu-central-3-s3-restic-backup
              image: ghcr.io/tryrocket-cloud/tryrocket-cloud:backup
              imagePullPolicy: Always
              env:
                - name: VAULTWARDEN_EXPORT_JSON
                  value: /export/vaultwarden-export.json
                - name: RESTIC_CACHE_DIR
                  value: /cache/ionos.com/vaultwarden/restic
                - name: HOSTNAME
                  value: tryrocket.cloud
              envFrom:
                - secretRef:
                    name: ionos-com-objectstorage-bucket-secret
                - secretRef:
                    name: ionos-com-objectstorage-user-secret
                - secretRef:
                    name: ionos.com-restic-repository-secret
              command:
                  - /bin/sh
                  - -c
                  - |
                    cat /etc/environment

                    export VAULTWARDEN_VERSION=$(cat /export/vaultwarden.env)
                    export RESTIC_VERSION=$(restic version | awk '{print $2}')
                    export RESTIC_REPOSITORY="s3:$ENDPOINT/$BUCKET/$PREFIX"

                    [ -z "$VAULTWARDEN_VERSION" ] && exit 1
                    [ -z "$RESTIC_VERSION" ] && exit 1
                    [ -z "$RESTIC_REPOSITORY" ] && exit 1

                    # Start health check
                    #curl -fsS -m 10 --retry 5 $HC_PING_URL/start

                    # Perform restic backup
                    restic backup --host "$HOSTNAME" --tag restic:"$RESTIC_VERSION" --tag vaultwarden:"$VAULTWARDEN_VERSION" --tag export $VAULTWARDEN_EXPORT_JSON
                    #curl -fsS -m 10 --retry 5 $HC_PING_URL/$?

                    # Perform restic check
                    restic check --read-data-subset 1/3
                    #curl -fsS -m 10 --retry 5 $HC_PING_URL/$?

                    # Prune old backups
                    restic forget --keep-daily 30 --keep-monthly 3 --keep-yearly 1 --prune
                    #curl -fsS -m 10 --retry 5 $HC_PING_URL/$?
              volumeMounts:
                - name: vaultwarden-export-volume
                  mountPath: /export
                  readOnly: true
                # - name: backup-cache-volume
                #   mountPath: /cache
          volumes:
            - name: vaultwarden-export-volume
              emptyDir: {}
            - name: playbook-volume
              configMap:
                name: ansible-playbook-config
            # - name: backup-cache-volume
            #   persistentVolumeClaim:
            #     claimName: backup-cache-pvc
